import google.generativeai as genai
import subprocess
import os


GOOGLE_API_KEY = 'YOUR_GOOGLE_API_KEY' 
# -------------------------

# C·∫•u h√¨nh API
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

def generate_logstash_config(log_sample, desired_output, existing_code=None, error_message=None):
    """G·ª≠i y√™u c·∫ßu ƒë·∫øn AI ƒë·ªÉ t·∫°o ho·∫∑c s·ª≠a code Logstash."""
    if error_message:
        prompt = f"""
        The following Logstash filter code failed to parse the raw log into the desired JSON output.
        Please fix the code based on the error message. The most likely filter to use is the 'csv' filter.

        Raw Log Sample:
        {log_sample}

        Desired JSON Output:
        {desired_output}

        Faulty Logstash Code:
        ```groovy
        {existing_code}
        ```

        Error Message:
        {error_message}

        Provide only the corrected, complete Logstash configuration code block.
        """
    else:
        prompt = f"""
        Write a complete Logstash configuration that parses the following raw CSV log sample to match the desired JSON output.
        The input is stdin and the output should be stdout with the 'json_lines' codec. Use the 'csv' filter.

        Raw Log Sample:
        {log_sample}

        Desired JSON Output:
        {desired_output}

        Provide only the full Logstash configuration code block.
        """

    print("--- ü§ñ ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn AI... ---")
    try:
        response = model.generate_content(prompt)
        # Tr√≠ch xu·∫•t code t·ª´ trong kh·ªëi markdown ```
        code = response.text.strip().replace("```groovy", "").replace("```json", "").replace("```", "").strip()
        return code
    except Exception as e:
        print(f"L·ªói khi g·ªçi API c·ªßa Google: {e}")
        return None


def test_logstash_config(config_code, log_sample):
    """Ch·∫°y Logstash v·ªõi code v√† log sample, tr·∫£ v·ªÅ k·∫øt qu·∫£ v√† l·ªói."""
    config_filename = "temp_logstash.conf"
    with open(config_filename, "w", encoding='utf-8') as f:
        f.write(config_code)

    # C√¢u l·ªánh ƒë·ªÉ ch·∫°y Logstash, ƒë·ªçc config t·ª´ file
    command = [
        "logstash",
        "-f",
        config_filename
    ]
    
    print(f"--- ‚öôÔ∏è ƒêang th·ª±c thi Logstash v·ªõi file c·∫•u h√¨nh '{config_filename}'... ---")
    try:
        process = subprocess.Popen(
            command,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8'
        )
        
        # G·ª≠i log sample v√†o stdin v√† l·∫•y k·∫øt qu·∫£
        stdout, stderr = process.communicate(input=log_sample)
        
        # X√≥a file config t·∫°m
        os.remove(config_filename)

        return stdout, stderr
    except FileNotFoundError:
        print("\n[L·ªñI] L·ªánh 'logstash' kh√¥ng t√¨m th·∫•y.")
        print("H√£y ch·∫Øc ch·∫Øn r·∫±ng Logstash ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ƒë∆∞·ªùng d·∫´n c·ªßa n√≥ n·∫±m trong bi·∫øn m√¥i tr∆∞·ªùng PATH c·ªßa b·∫°n.")
        return None, "Logstash not found"
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói khi ch·∫°y subprocess c·ªßa Logstash: {e}")
        return None, str(e)


def main():
    """H√†m ch√≠nh ƒëi·ªÅu ph·ªëi v√≤ng l·∫∑p t·ª± s·ª≠a l·ªói."""
    log_sample = '2025/07/24 14:34:06,013201036611,TRAFFIC,end,2562,2025/07/24 14:34:06,14.225.209.154,210.211.104.250,14.225.209.154,210.211.104.250,VPN_GP_in_VietNam_NuocNgoai,,,incomplete,vsys1,EDGE,EDGE,ethernet1/2,ethernet1/2,Forward_SysLog_127.11,2260758,1,36523,80,36523,28869,0x400019,tcp,allow,152,78,74,2,2025/07/24 14:33:54,0,any,,7360121242230814409,0x8000000000000000,Viet Nam,Viet Nam,,1,1,aged-out,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2025-07-24T14:34:07.730+07:00,,,unknown,unknown,unknown,1,,,incomplete,no,no,0'
    
    desired_output = """
{
    "Action_Flags": "0x8000000000000000",
    "Flags": "0x400019",
    "Dest_Zone": "EDGE",
    "@timestamp": "2025-09-23T03:41:36.450037117Z",
    "Device_Name": "PAN-IDC-5220-01",
    "Action_Src": "from-policy",
    "Category": "any",
    "Src_Location": "Viet Nam",
    "Virtual_System": "vsys1",
    "Src_IP": "14.225.209.154",
    "Dest_Port": 80,
    "Session_End_Reason": "aged-out",
    "Log_Action": "Forward_SysLog_127.11",
    "Session_ID": 2260758,
    "type": "pa_traffic",
    "Src_IP_Nat": "14.225.209.154",
    "Bytes_Received": 74,
    "Src_Zone": "EDGE",
    "Bytes_Sent": 78,
    "Rule_Name": "VPN_GP_in_VietNam_NuocNgoai",
    "Dest_Location": "Viet Nam",
    "Application Category": "unknown",
    "Dest_IP_Nat": "210.211.104.250",
    "Application Technology": "unknown",
    "Dest_Port_Nat": 28869,
    "Action": "allow",
    "Application Risk": "1",
    "Dest_IP": "210.211.104.250",
    "Packets": 2,
    "Generated_Time": "2025/07/24 14:34:06",
    "Application Characteristic": null,
    "Protocol": "tcp",
    "Bytes": 152,
    "Src_Port_Nat": 36523,
    "App": "incomplete",
    "Src_Port": 36523,
    "Application Subcategory": "unknown"
}
"""
    
    max_retries = 5
    current_code = None
    error_message = None

    for i in range(max_retries):
        print(f"\n--- V√íNG L·∫∂P {i + 1}/{max_retries} ---")
        
        current_code = generate_logstash_config(log_sample, desired_output, current_code, error_message)
        if not current_code:
            print("--- ‚ùå Kh√¥ng th·ªÉ t·∫°o code t·ª´ AI, d·ª´ng ch∆∞∆°ng tr√¨nh. ---")
            break

        print("--- üìÑ Code do AI t·∫°o ra: ---")
        print(current_code)
        
        stdout, stderr = test_logstash_config(current_code, log_sample)
        
        if stderr is None: # L·ªói kh√¥ng ch·∫°y ƒë∆∞·ª£c Logstash
            break

        # ƒêi·ªÅu ki·ªán ki·ªÉm tra l·ªói c√≥ th·ªÉ c·∫ßn chi ti·∫øt h∆°n
        if stderr and ("Error" in stderr or "ERROR" in stderr or "exception" in stderr):
            print("--- ‚ùå Logstash th·∫•t b·∫°i. Chu·∫©n b·ªã g·ª≠i l·∫°i cho AI... ---")
            print("--- Th√¥ng b√°o l·ªói: ---")
            print(stderr)
            error_message = stderr
        elif not stdout:
            print("--- ‚ö†Ô∏è Logstash kh√¥ng t·∫°o ra output. Coi nh∆∞ l·ªói. Chu·∫©n b·ªã g·ª≠i l·∫°i cho AI... ---")
            error_message = "Logstash ran successfully but produced no output. The filter might have dropped the event."
        else:
            print("\n--- ‚úÖ TH√ÄNH C√îNG! C·∫•u h√¨nh Logstash ƒë√£ ch·∫°y ƒë√∫ng. ---")
            print("\n--- üìú Code cu·ªëi c√πng: ---")
            print(current_code)
            print("\n--- ‚ú® K·∫øt qu·∫£ JSON ƒë√£ parse: ---")
            print(stdout)
            return

    print(f"\n--- ‚ùå Th·∫•t b·∫°i sau {max_retries} l·∫ßn th·ª≠. Kh√¥ng th·ªÉ t·∫°o c·∫•u h√¨nh ho·∫°t ƒë·ªông. ---")


if __name__ == "__main__":
    if GOOGLE_API_KEY == 'YOUR_GOOGLE_API_KEY':
        print("L·ªñI: Vui l√≤ng thay th·∫ø 'YOUR_GOOGLE_API_KEY' b·∫±ng API Key c·ªßa b·∫°n trong file script.")
    else:
        main()