import subprocess
import time
import re
import os
import argparse

parser = argparse.ArgumentParser(description="Gi√°m s√°t log c·ªßa Logstash v√† k√≠ch ho·∫°t c∆° ch·∫ø t·ª± s·ª≠a l·ªói.")
parser.add_argument("--logfile", default="/var/log/logstash/logstash-plain.log", help="ƒê∆∞·ªùng d·∫´n t·ªõi file log c·ªßa Logstash.")
parser.add_argument("--fixer_script", default="parserlog.py", help="ƒê∆∞·ªùng d·∫´n t·ªõi script s·ª≠a l·ªói.")
parser.add_argument("--definitions_path", default="log_definitions", help="ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a c√°c ƒë·ªãnh nghƒ©a log.")
args = parser.parse_args()


IS_ERROR_PATTERN = re.compile(r"\[(ERROR|FATAL)\]")

PIPELINE_ID_PATTERN_1 = re.compile(r"pipeline_id:(?P<pipeline_id>\w+)")
PIPELINE_ID_PATTERN_2 = re.compile(r"\[logstash\..*?\]\[(?P<pipeline_id>\w+)\]")
# ----------------------------------------------------------------

COOLDOWN_PERIOD = 300  # Gi√¢y (5 ph√∫t)
last_triggered = {}

def trigger_fixer(pipeline_id, error_message):
    """K√≠ch ho·∫°t script parserlog.py ƒë·ªÉ s·ª≠a l·ªói."""
    
    current_time = time.time()
    if pipeline_id in last_triggered and (current_time - last_triggered[pipeline_id]) < COOLDOWN_PERIOD:
        print(f"---  ƒêang trong th·ªùi gian ch·ªù (cooldown) cho pipeline '{pipeline_id}', b·ªè qua trigger. ---")
        return

    print(f"\nüî•üî•üî• PH√ÅT HI·ªÜN L·ªñI trong pipeline '{pipeline_id}' üî•üî•üî•")
    print(f"N·ªôi dung l·ªói (t√≥m t·∫Øt): {error_message[:200]}...")
    print(f"--- K√≠ch ho·∫°t c·ªó m√°y s·ª≠a l·ªói cho '{pipeline_id}'... ---")

    if not os.path.exists(os.path.join(args.definitions_path, pipeline_id)):
        print(f"--- ‚ö†Ô∏è  C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y ƒë·ªãnh nghƒ©a trong '{args.definitions_path}' cho pipeline '{pipeline_id}'. Kh√¥ng th·ªÉ t·ª± ƒë·ªông s·ª≠a. ---")
        last_triggered[pipeline_id] = current_time
        return
        
    try:
        command = ["python3", args.fixer_script, "--fix", pipeline_id, "--error", error_message]
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print("--- Output t·ª´ c·ªó m√°y s·ª≠a l·ªói: ---")
        print(result.stdout)
        
        last_triggered[pipeline_id] = current_time
        print(f"--- ‚úÖ Ho√†n t·∫•t qu√° tr√¨nh s·ª≠a l·ªói cho '{pipeline_id}'. Ti·∫øp t·ª•c gi√°m s√°t... ---")
    except subprocess.CalledProcessError as e:
        print(f"--- ‚ùå C·ªó m√°y s·ª≠a l·ªói ƒë√£ ch·∫°y v√† g·∫∑p l·ªói. ---")
        print(f"--- L·ªói t·ª´ script con: ---\n{e.stderr}")
    except Exception as e:
        print(f"--- ‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi c·ªó m√°y s·ª≠a l·ªói: {e} ---")


def monitor_log_file():
    """Theo d√µi file log c·ªßa Logstash."""
    print(f"--- üïµÔ∏è B·∫Øt ƒë·∫ßu gi√°m s√°t file log: {args.logfile} ---")
    try:
        process = subprocess.Popen(['tail', '-F', '-n', '0', args.logfile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        while True:
            line = process.stdout.readline()
            if not line:
                time.sleep(1)
                continue

            # B∆Ø·ªöC 1: KI·ªÇM TRA XEM C√ì L·ªñI KH√îNG
            if IS_ERROR_PATTERN.search(line):
                
                # B∆Ø·ªöC 2: N·∫æU C√ì L·ªñI, C·ªê G·∫ÆNG T√åM PIPELINE_ID
                pipeline_id = "main" # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                
                match1 = PIPELINE_ID_PATTERN_1.search(line)
                match2 = PIPELINE_ID_PATTERN_2.search(line)

                if match1:
                    pipeline_id = match1.group("pipeline_id")
                elif match2:
                    pipeline_id = match2.group("pipeline_id")
                
                error_message = line.strip()
                trigger_fixer(pipeline_id, error_message)
                    
    except KeyboardInterrupt:
        print("\n--- üõë D·ª´ng gi√°m s√°t. ---")
    except Exception as e:
        print(f"\n--- ‚ùå L·ªói trong qu√° tr√¨nh gi√°m s√°t: {e} ---")

if __name__ == "__main__":
    monitor_log_file()